// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/04/Mult.asm

// Multiplies R0 and R1 and stores the result in R2.
// (R0, R1, R2 refer to RAM[0], RAM[1], and RAM[2], respectively.)

// R0 and R1 are inputs (ints).
// R2 is the product of the two inputs.
// Create a loop that runs R0 times
// adding R1 to R2 each time.
// End loop.

// i = iterator, R16
// LOOP:
//		if i > R0, goto STOP
//		R2 = R2 + R1
//		i = i + 1
//		goto LOOP


	@i
	M=0		// iterator variable, @R16, i = 0

	@R2
	M=0

(LOOP)
	@R0
	D=M

	@R0
	D;JLE

	@R1
	D=M 	// get value of R1

	@END
	D;JLE
	
	
	
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/04/Fill.asm

// Runs an infinite loop that listens to the keyboard input.
// When a key is pressed (any key), the program blackens the screen,
// i.e. writes "black" in every pixel;
// the screen should remain fully black as long as the key is pressed. 
// When no key is pressed, the program clears the screen, i.e. writes
// "white" in every pixel;
// the screen should remain fully clear as long as no key is pressed.

// rectangle is 256 rows x 512 columns
// keyboard = KBD, RAM[24576]
// screen = SCREEN, RAM[16384]

@24576
D=A 			// D = 24576

@endValue
M=D 			// endValue holds 24576, R16

(LOOP)
	@SCREEN
	D=A
	@address 	// R17
	M=D 		// address = 16384

	@KBD		
	D=M 		// KBD = D (listen to keyboard)

	@WLOOP 	 	// KBD == 0? (key not pressed)
	D;JEQ 		// if 0, goto WLOOP

	(BLOOP)
		@address
		A=M
		M=-1 		// fill pixel w/ black

		@address
		M=M+1 		// move to next R
		D=M 		// address = D

		@endValue
		D=M-D 		// endValue - current address

		@LOOP
		D;JEQ 		// D = 0, goto LOOP

		@BLOOP
		D;JNE 		// D != 0, goto BLOOP

	(WLOOP)
		@address
		A=M
		M=0 		// fill pixel w/ white

		@address
		M=M+1 		// move to next R
		D=M 		// address = D

		@endValue
		D=M-D 		// endValue - current address

		@LOOP
		D;JEQ 		// D = 0, goto LOOP

		@WLOOP
		D;JNE 		// D != 0, goto WLOOP
