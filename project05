// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux4Way(in=load, sel=address[13..14], a=ram, b=ram2, c=screen, d=kbd);
	  Or(a=ram, b=ram2, out=x);
	  RAM16K(in=in, load=x, address=address[0..13], out=y);	
	  Screen(in=in, load=screen, address=address[0..12], out=s);	
	  Keyboard(out=k);
	  Mux4Way16(a=y, b=y, c=s, d=k, sel=address[13..14], out=out);
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstr);
    And(a=instruction[15], b=true, out=cInstr);
    And(a=cInstr, b=instruction[12], out=useM);
    And(a=cInstr, b=instruction[5], out=destA);
    And(a=cInstr, b=instruction[4], out=destD);
    And(a=cInstr, b=instruction[3], out=writeM);

    Mux16(a=loop, b=instruction, sel=aInstr, out=aIn);

    Or(a=destA, b=aInstr, out=loadA);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    Mux16(a=aOut, b=inM, sel=useM, out=aOrM);

    DRegister(in=loop, load=destD, out=dOut);

    ALU(x=dOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=aluZr, ng=aluNg, out=loop, out=aluOut);
    Mux16(a=aOrM, b=aluOut, sel=cInstr, out=outM);

    And(a=aluNg, b=instruction[2], out=jlt);
    And(a=aluZr, b=instruction[1], out=jeq);
    Or(a=aluZr, b=aluNg, out=zrOrNg);
    Not(in=zrOrNg, out=notZrOrNg);
    And(a=notZrOrNg, b=instruction[0], out=jgt);
    Or(a=jlt, b=jeq, out=jltOrJeq);
    Or(a=jltOrJeq, b=jgt, out=jltOrJeqOrJgt);
    And(a=cInstr, b=jltOrJeqOrJgt, out=jump);
    Not(in=jump, out=noJump);

    PC(in=aOut, load=jump, inc=noJump, reset=reset, out[0..14]=pc);
}
